<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>New Record to Google Sheets (TSV)</label>
<label locale="ja">Google Sheets 行追加 (TSV)</label>

<help-page-url>https://support.questetra.com/addons/googlesheets-appendtsv/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googlesheets-appendtsv/</help-page-url>

<last-modified>2018-09-03</last-modified>
<engine-type>1</engine-type>


<configs>
  <config name="conf_DataIdA" required="true" form-type="SELECT" select-data-type="STRING">
    <label>A: Select TSV STRING DATA</label>
    <label locale="ja">A: TSV が格納されている文字列型データを選択してください</label>
  </config>
  <config name="conf_ColIds" required="true" form-type="TEXTFIELD">
    <label>B: Set THROW COL IDs (e.g. "0,1,5d,3n,6")</label>
    <label locale="ja">B: 送出データの項目 ID をセットしてください (例 "0,1,5d,3n,6")</label>
  </config>
  <config name="conf_OAuth2" required="true" form-type="TEXTFIELD">
    <label>C: Set OAuth2 Config Name (at [OAuth 2.0 Setting])</label>
    <label locale="ja">C: OAuth2通信許可設定名 (←［OAuth 2.0 設定］)</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|SELECT_SINGLE">
    <label>D: Select STRING/SELECT for Spreadsheet ID (Non-existent Error)</label>
    <label locale="ja">D: Spreadsheet ID が格納されている文字列型or選択肢型データを選択してください（存在しない場合、エラー）</label>
  </config>
  <config name="conf_DataIdE" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|SELECT_SINGLE">
    <label>E: Select STRING/SELECT for Sheet Name (Non-existent Create)</label>
    <label locale="ja">E: Sheet 名が格納されている文字列型or選択肢型データを選択してください（存在しない場合、追加）</label>
  </config>
</configs>


<script><![CDATA[
// Append TSV Records to Google Sheets
// (c) 2018, Questetra, Inc. (the MIT License)

//// OAuth2 config sample
//// at Workflow App > Detail > OAuth2 Setting > (Get Refresh Token)
// - Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// - Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// - Scope: https://www.googleapis.com/auth/spreadsheets
// - Consumer Key: (Get from Google Developers Console)
// - Consumer Secret: (Get from Google Developers Console)
// Ref.
// - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/get
// - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request


//////// START "main()" ////////
main();
function main(){ 


//// == Config Retrieving / 工程コンフィグの参照 ==
const dataIdA = configs.get( "conf_DataIdA" ) + "";
const dataIdD = configs.get( "conf_DataIdD" ) + "";
const dataIdE = configs.get( "conf_DataIdE" ) + "";

const colIds  = configs.get( "conf_ColIds"  ) + "";
const oauth2  = configs.get( "conf_OAuth2"  ) + "";
// convert 'java.lang.String' to javascript primitive 'string'


//// == Data Retrieving / ワークフローデータの参照 ==
let myTsv   = engine.findDataByNumber( dataIdA );
  if( myTsv === null){ throw new Error( "TSV no data" ); }else{ myTsv += "";}
let docId   = "";
  if( engine.findDataDefinitionByNumber( dataIdD ).matchDataType( "SELECT_SINGLE" ) ){
    docId = engine.findDataByNumber( dataIdD ).get(0).getValue() + "";
  }else{
    docId = engine.findDataByNumber( dataIdD ) + "";
  }
let sheetName = "";
  if( engine.findDataDefinitionByNumber( dataIdE ).matchDataType( "SELECT_SINGLE" ) ){
    sheetName = engine.findDataByNumber( dataIdE ).get(0).getValue() + "";
  }else{
    sheetName = engine.findDataByNumber( dataIdE ) + "";
  }


//// == Calculating / 演算 ==
// obtain OAuth2 Access Token
const token  = httpClient.getOAuth2Token( oauth2 );

/// (1) Sheet Exist Check
// prepare API Request
let apiRequest = httpClient.begin(); // HttpRequestWrapper
// - com.questetra.bpms.core.event.scripttask.HttpClientWrapper
apiRequest     = apiRequest.bearer( token );
apiRequest     = apiRequest.queryParam( "includeGridData", false );
// - To retrieve only the specific fields of the spreadsheet
// - Ref: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/get

// access API (with post(), get(), put(), etc.)
const response    = apiRequest.get( "https://sheets.googleapis.com/v4/spreadsheets/" + docId );
// - HttpResponseWrapper
const httpStatus  = response.getStatusCode() + "";
const responseStr = response.getResponseAsString() + "";
const responseObj = JSON.parse( responseStr );
engine.log( "GET [spreadsheet specific]: " + httpStatus );
if( httpStatus !== "200" ){
  let errorMessage = "\n- HTTP STATUS is not 200, Service Task stopped. -\n";
  errorMessage += responseStr + "\n";
  throw new Error( errorMessage );
}

// get Sheet ID
let sheetId = -1; // NotExist
engine.log( "SPREADSHEET TITLE: " + responseObj.properties.title );
for( let i = 0; i < responseObj.sheets.length; i++ ){
  if( responseObj.sheets[i].properties.title === sheetName ){
    sheetId = parseInt( responseObj.sheets[i].properties.sheetId, 10 );
    engine.log( " SHEET NAME: " + sheetName + " exists, id=" + sheetId );
    break;
  }else{
    engine.log( " SHEET NAME: " + sheetName + " does not exist" );
  }
}

/// (2) Create New Sheet (if NotExist)
if(sheetId === -1){
  // prepare API Request2
  // - define Request2 Object for spreadsheets.batchUpdate request
  sheetId = processInstance.getProcessInstanceId() - 0;
  let requestObj2 = {};
      requestObj2.requests = [];
      requestObj2.requests[0] = {};
      requestObj2.requests[0].addSheet = {};
      requestObj2.requests[0].addSheet.properties = {};
      requestObj2.requests[0].addSheet.properties.sheetId = sheetId;
      requestObj2.requests[0].addSheet.properties.title = sheetName;
      // - Ref: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#addsheetrequest
  let apiRequest2 = httpClient.begin(); // HttpRequestWrapper
  apiRequest2     = apiRequest2.bearer( token );
  apiRequest2     = apiRequest2.body( JSON.stringify( requestObj2 ), "application/json" );

  // access API (with post())
  const response2    = apiRequest2.post( "https://sheets.googleapis.com/v4/spreadsheets/" + docId + ":batchUpdate" );
  const httpStatus2  = response2.getStatusCode() + "";
  const responseStr2 = response2.getResponseAsString() + "";
  engine.log( "POST [AddSheet request]: " + httpStatus2 );
  if( httpStatus2 !== "200" ){
    let errorMessage2 = "\n- HTTP STATUS is not 200, Service Task stopped. -\n";
    errorMessage2 += responseStr2 + "\n";
    throw new Error( errorMessage2 );
  }
}

/// (3) Append Records
// prepare API Request3
const arrColIds = colIds.split(",");
const arrMyTsv  = myTsv.split("\n");
let requestObj3 = {};
    requestObj3.requests = []; // Array
    requestObj3.requests[0] = {};
    requestObj3.requests[0].appendCells = {};
    requestObj3.requests[0].appendCells.rows = []; // Array
    requestObj3.requests[0].appendCells.sheetId = sheetId;
    requestObj3.requests[0].appendCells.fields = "*";
for( let i = 0; i < arrMyTsv.length; i++ ){
  requestObj3.requests[0].appendCells.rows[i] = {};
  requestObj3.requests[0].appendCells.rows[i].values = [];
  let arrMyCellValues = arrMyTsv[i].split("\t");
  for( let j = 0; j < arrColIds.length; j++ ){
    requestObj3.requests[0].appendCells.rows[i].values[j] = {};
    if( arrColIds[j].slice(-1) === "n" ){ // Numeric Type
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredValue = {};
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredValue.numberValue = arrMyCellValues[parseInt( arrColIds[j] )];
    }else if( arrColIds[j].slice(-1) === "d" ){ // Date Type
      let dateMyCellDate = new Date( arrMyCellValues[parseInt( arrColIds[j] )] );
      let serialNumber = dateMyCellDate.getTime() / 86400000 + 25569;
      // - https://developers.google.com/sheets/api/reference/rest/v4/DateTimeRenderOption#ENUM_VALUES.SERIAL_NUMBER
      // 25569 means 1970-01-01 00:00:00, 86400 means the number of seconds per day

      serialNumber += engine.getTimeZoneOffsetInMinutes() / (60 * 24); // Depends on Your Drive Setting

      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredFormat = {};
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredFormat.numberFormat = {};
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredFormat.numberFormat.type = "DATE";
//      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredFormat.numberFormat.type = "DATE_TIME";
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredValue = {};
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredValue.numberValue = serialNumber;
    }else{
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredValue = {};
      requestObj3.requests[0].appendCells.rows[i].values[j].userEnteredValue.stringValue = arrMyCellValues[parseInt( arrColIds[j] )];
    }
  }
}// - Ref: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#appendcellsrequest
let apiRequest3 = httpClient.begin(); // HttpRequestWrapper
apiRequest3     = apiRequest3.bearer( token );
apiRequest3     = apiRequest3.body( JSON.stringify( requestObj3 ), "application/json" );

// access API (with post())
const response3    = apiRequest3.post( "https://sheets.googleapis.com/v4/spreadsheets/" + docId + ":batchUpdate" );
const httpStatus3  = response3.getStatusCode() + "";
const responseStr3 = response3.getResponseAsString() + "";
engine.log( "POST [AppendCells request]: " + httpStatus3 );
if( httpStatus3 !== "200" ){
  let errorMessage3 = "\n- HTTP STATUS is not 200, Service Task stopped. -\n";
  errorMessage3 += responseStr3 + "\n";
  throw new Error( errorMessage3 );
}


//// == Data Updating / ワークフローデータへの代入 ==
// (nothing)


} //////// END "main()" ////////

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACuUlEQVRYR82X0VHbQBCGd8UT8BA6iFMBTgXxIwjP4A4SKoBUEFNBTAU4HTgz6PCjqCCkgpAOnBf5Sfdnfs3JcxKSLBmUyc34wZLu9t/d2+/2VFqMk5OTwd7e3gcRGfIHYKCqA38qgCdVfRKRR/7SNH1YLpf83zi06W0Yhp9E5FJVabjzAPCoqrMoir7VTa4UMB6PR9ba27KXnRW4CYxOEAQXd3d3cXmNZwLotare7mqsaR6AC2PM3P+mIMDl+lcfxvM10zR95++NgoCzs7MrEfnapwAR+RxF0Sy3URDQZ/hzg+U0FASMRqOjg4MDltObPqIA4E+SJIM4jleVEeBDV3qz1xZB40EQTMqVUFmGYRiy7imC8HnxAPAgIlfGGEKqMBpBdHp6OlFVluX5LioAfAcwv7+/X7QCEasAAIwxN/4E7o39/f2RIyKjc8T3eYSch3zE3D6SgOv1OvZz7dI7VdVVUxXwgy+O69MmhLaNCMUfHh6eA7iiAwCujTHTujLMBHiLrwAwfAtr7c82h4vzdKiqxwAYtUkeMb7rKqDK0YznALJwu1SMvA83Kaqa/BoC2ka/7rtGEjJ0P15qoWk+gPd+OVadhqz/yz5EALgxxvC82Yw6EL26iCrj2f6p89TRkFWxE4TydQkjEZlWUfCZAJKvDBD2CEEQcJeznLhH3m7J8W9XHYskSRY+jLgWWeCTsXwc0+NLALMkSW7KJMsNMzpBEGQ0zIe1dlXnpTtl2VuStNwHrUC0gZAxhmHsPFxv+dGH0a4cyKGTtdzW2sp2W1VJPkaGMPLhtBG/q4DO3tdN+L8F/IumtLEndCXH20xvPaG1dljbljNvfXbGWy8m+cZx5TPfBp22OxMA4TTp3BO6aPDwOG5rzP/OtWrz8nVs62FUNubhOLueiwiRWkCy83JzPbfWxm06qL/sgpkwsGVshgAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
