<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Converter (Table to Excel-CSV FILE)</label>
<label locale="ja">コンバータ (Table to Excel-CSV FILE)</label>

<last-modified>2018-07-31</last-modified>
<help-page-url>https://support.questetra.com/addons/converter-tabletoexcelcsv/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/converter-tabletoexcelcsv/</help-page-url>

<configs>
  <config name="conf_DataIdA" required="true" form-type="SELECT" select-data-type="LIST">
    <label>A: Select TABLE DATA</label>
    <label locale="ja">A: テーブル型データを選択してください</label>
  </config>
  <config name="conf_ColIds" required="true" form-type="TEXTFIELD">
    <label>B: Set COL IDs for Extraction (e.g. "0,1,5,3,6")</label>
    <label locale="ja">B: 抽出データのカラム ID をセットしてください (例 "0,1,5,3,6")</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C: Select STRING DATA for File Name</label>
    <label locale="ja">C: ファイル名が格納されている文字列型データを選択してください</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="FILE">
    <label>D: Select FILE DATA (append)</label>
    <label locale="ja">D: ファイル型データを選択してください（追加）</label>
  </config>
</configs>

<engine-type>1</engine-type>

<script><![CDATA[
// Converter from Table to Excel-CSV (ver. 20180731)
// (c) 2018, Questetra, Inc. (the MIT License)

//// == 自動工程コンフィグの参照 / Config Retrieving ==
const dataIdA = configs.get( "conf_DataIdA" ) + "";
const colIds  = configs.get( "conf_ColIds" )  + "";
const dataIdC = configs.get( "conf_DataIdC" ) + "";
const dataIdD = configs.get( "conf_DataIdD" ) + "";

//// == ワークフローデータの参照 / Data Retrieving ==
const myTable = engine.findDataByNumber( dataIdA );
// com.questetra.bpms.core.model.formdata.ListArray
const fileName = engine.findDataByNumber( dataIdC ) + "";
let   myFiles  = engine.findDataByNumber( dataIdD );
// java.util.ArrayList

//// == 演算 / Calculating ==
if( myTable !== null){
  let colIdArray = colIds.split(",");
  let numOfCols = colIdArray.length;
  let numOfRows = myTable.size() - 0; // 行（Tableの高さ）

  let myTsv = "";
  for( let i = 0; i < numOfRows; i++ ){
    for( let j = 0; j < numOfCols; j++ ){
      myTsv += myTable.get(i, parseInt( colIdArray[j] ) ) + "";
      if( j != numOfCols - 1 ){
        myTsv += "\t";
      }
    }
    if( i != numOfRows - 1 ){
      myTsv += "\n";
    }
  }

  myFiles.add(
    new com.questetra.bpms.core.event.scripttask.NewQfile(
      fileName,
      "text/tab-separated-values; charset=x-UTF-16LE-BOM", 
      myTsv
    )
  );
}

//// == ワークフローデータへの代入 / Data Updating ==
engine.setDataByNumber( dataIdD, myFiles );
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAB7klEQVRYR8WXwVHCQBSG94cbHMQK1ArUCgw3ZsMMYwVCBdKBUoFSgdgBB/KGm7ED7IASckmOec4yWWeNidmwAbjyZr+Pf9+8t0A09JFS3gghRkQ0q3Mk6hSX1So4gA8hRI+ZZ0T0bHuus4AJ11BmnhDRwkbCSaAIrqFpmt632+0oTdO7JEnmYRhGRUKuAlsAFyW/VAF76jtm3iRJ0i+ScBVQjRcCOKuKu0zCSUBBs+63liCiW1PWWSCTGAN4q0ohu45bItro2kYE1GG+76uuf6iQeA+CYHySBJh5S0RXecFGErDtAwD91WoVNprAYDC4XK/XWxuJohScEtCDiJmXRDSxlPg1JfcWyE9BZl7kJJbM7OUHVT6FvQTKRrCWqLoWc1fUFvhv/gshvuI49syRK6X8MyPMFGoJ1IXrbpdSvgJ4NLufmXcDyVpgX7iG+r6vpt+1sbLnRDS1EnCFK6jqi1artTEWVxQEwXmlQBNwI4WpEOLlZw8A/X8FmoQb/bAEMMoW06xU4BDw/FUw82ehwKHgRgrPAJ4KBQ4N1xLD4dBTi+lXAseCF27DU8CVyC6BU8F3AqeEa4Go5Fn9Z7HYPDrr1iA/o7MDjgLfJeB5Xq/b7ap3ml4UR4P/NKGS6HQ6CwBRHMfTsv9xdeO1qf8G4yxv7ljnMNoAAAAASUVORK5CYII=
</icon>

</service-task-definition>