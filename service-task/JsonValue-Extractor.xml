<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Single Value from a JSON object using JSONPath</label>
<label locale="ja">JSONPath による JSON Value の取得</label>

<summary>Obtains the specified values from JSON text data and stores them as workflow data</summary>
<summary locale="ja">JSON テキストデータから指定した値を取得し、ワークフローデータとして格納します</summary>

<last-modified>2018-07-10</last-modified>
<help-page-url>https://support.questetra.com/addons/jsonvalue-extractor/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/jsonvalue-extractor/</help-page-url>

<engine-type>0</engine-type>

<configs>
  <config name="conf_DataIdA" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|STRING_TEXTAREA">
    <label>A: Select STRING DATA for JSON Text</label>
    <label locale="ja">A: JSON テキストが格納されている文字列型データを選択してください</label>
  </config>
  <config name="conf_DataIdB" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|SELECT_SINGLE">
    <label>B: Select STRING/SELECT DATA for JSONPath</label>
    <label locale="ja">B: JSONPath が格納されている文字列型or選択肢型データを選択してください</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL">
    <label>C: Select STRING/NUMERIC DATA for JSON Value (update)</label>
    <label locale="ja">C: JSON Value が格納される文字列型or数値型データを選択してください (更新)</label>
  </config>
</configs>


<script><![CDATA[
// JSON Value Extractor (ver. 20180710)
// (c) 2018, Questetra, Inc. (the MIT License)

// About JSON Path
// - see http://jsonpath.com/


//// == Config Retrieving / 工程コンフィグの参照 ==
var dataIdA = configs.get( "conf_DataIdA" ) + "";
var dataIdB = configs.get( "conf_DataIdB" ) + "";
var dataIdC = configs.get( "conf_DataIdC" ) + "";
// convert 'java.lang.String' to 'javascript string'


//// == Data Retrieving / ワークフローデータの参照 ==
var jsonText = engine.findDataByNumber( dataIdA ) + "";
var pathText = "";
if( engine.findDataDefinitionByNumber( dataIdB ).matchDataType( "SELECT_SINGLE" ) ){
    pathText = engine.findDataByNumber( dataIdB ).get(0).getValue() + "";
}else{
    pathText = engine.findDataByNumber( dataIdB ) + "";
}


//// == Calculating / 演算 ==
/* JSONPath 0.8.5 - XPath for JSON
 *
 * Copyright (c) 2007 Stefan Goessner (goessner.net)
 * Licensed under the MIT (MIT-LICENSE.txt) licence.
 *
 * Proposal of Chris Zyp goes into version 0.9.x
 * Issue 7 resolved
 */
function jsonPath(obj, expr, arg) {
   var P = {
      resultType: arg && arg.resultType || "VALUE",
      result: [],
      normalize: function(expr) {
         var subx = [];
         return expr.replace(/[\['](\??\(.*?\))[\]']|\['(.*?)'\]/g, function($0,$1,$2){return "[#"+(subx.push($1||$2)-1)+"]";})  /* http://code.google.com/p/jsonpath/issues/detail?id=4 */
                    .replace(/'?\.'?|\['?/g, ";")
                    .replace(/;;;|;;/g, ";..;")
                    .replace(/;$|'?\]|'$/g, "")
                    .replace(/#([0-9]+)/g, function($0,$1){return subx[$1];});
      },
      asPath: function(path) {
         var x = path.split(";"), p = "$";
         for (var i=1,n=x.length; i<n; i++)
            p += /^[0-9*]+$/.test(x[i]) ? ("["+x[i]+"]") : ("['"+x[i]+"']");
         return p;
      },
      store: function(p, v) {
         if (p) P.result[P.result.length] = P.resultType == "PATH" ? P.asPath(p) : v;
         return !!p;
      },
      trace: function(expr, val, path) {
         if (expr !== "") {
            var x = expr.split(";"), loc = x.shift();
            x = x.join(";");
            if (val && val.hasOwnProperty(loc))
               P.trace(x, val[loc], path + ";" + loc);
            else if (loc === "*")
               P.walk(loc, x, val, path, function(m,l,x,v,p) { P.trace(m+";"+x,v,p); });
            else if (loc === "..") {
               P.trace(x, val, path);
               P.walk(loc, x, val, path, function(m,l,x,v,p) { typeof v[m] === "object" && P.trace("..;"+x,v[m],p+";"+m); });
            }
            else if (/^\(.*?\)$/.test(loc)) // [(expr)]
               P.trace(P.eval(loc, val, path.substr(path.lastIndexOf(";")+1))+";"+x, val, path);
            else if (/^\?\(.*?\)$/.test(loc)) // [?(expr)]
               P.walk(loc, x, val, path, function(m,l,x,v,p) { if (P.eval(l.replace(/^\?\((.*?)\)$/,"$1"), v instanceof Array ? v[m] : v, m)) P.trace(m+";"+x,v,p); }); // issue 5 resolved
            else if (/^(-?[0-9]*):(-?[0-9]*):?([0-9]*)$/.test(loc)) // [start:end:step]  phyton slice syntax
               P.slice(loc, x, val, path);
            else if (/,/.test(loc)) { // [name1,name2,...]
               for (var s=loc.split(/'?,'?/),i=0,n=s.length; i<n; i++)
                  P.trace(s[i]+";"+x, val, path);
            }
         }
         else
            P.store(path, val);
      },
      walk: function(loc, expr, val, path, f) {
         if (val instanceof Array) {
            for (var i=0,n=val.length; i<n; i++)
               if (i in val)
                  f(i,loc,expr,val,path);
         }
         else if (typeof val === "object") {
            for (var m in val)
               if (val.hasOwnProperty(m))
                  f(m,loc,expr,val,path);
         }
      },
      slice: function(loc, expr, val, path) {
         if (val instanceof Array) {
            var len=val.length, start=0, end=len, step=1;
            loc.replace(/^(-?[0-9]*):(-?[0-9]*):?(-?[0-9]*)$/g, function($0,$1,$2,$3){start=parseInt($1||start);end=parseInt($2||end);step=parseInt($3||step);});
            start = (start < 0) ? Math.max(0,start+len) : Math.min(len,start);
            end   = (end < 0)   ? Math.max(0,end+len)   : Math.min(len,end);
            for (var i=start; i<end; i+=step)
               P.trace(i+";"+expr, val, path);
         }
      },
      eval: function(x, _v, _vname) {
         try { return $ && _v && eval(x.replace(/(^|[^\\])@/g, "$1_v").replace(/\\@/g, "@")); }  // issue 7 : resolved ..
         catch(e) { throw new SyntaxError("jsonPath: " + e.message + ": " + x.replace(/(^|[^\\])@/g, "$1_v").replace(/\\@/g, "@")); }  // issue 7 : resolved ..
      }
   };
   var $ = obj;
   if (expr && obj && (P.resultType == "VALUE" || P.resultType == "PATH")) {
      P.trace(P.normalize(expr).replace(/^\$;?/,""), obj, "$");  // issue 6 resolved
      return P.result.length ? P.result : false;
   }
} 
/// JSONPath end


// parse for API Request
var jsonObj = JSON.parse( jsonText );

// the return value of jsonPath is an array, which is also a valid JSON structure
var valueArray = jsonPath( jsonObj, pathText );


//// == Data Updating / ワークフローデータへの代入 ==
if( engine.findDataDefinitionByNumber( dataIdC ).matchDataType( "DECIMAL" ) ){
    var returnValue =  parseFloat( valueArray[0] );
    engine.setDataByNumber( dataIdC, java.math.BigDecimal(returnValue) );
}else{
    engine.setDataByNumber( dataIdC, ( valueArray[0] + "" ) );
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR61XUVLbMBDVmr+YmcIJ
mp6g9AR1/kBipukJmp6gcALgBNATFE7QdAaJT8wJSE5QbtB0Bpu/bOe5kisUx7JD9ZdY9j7t2933
RKLHklJ+EEKMiWjIzDtEtIfXmXlGRAtmfhBCTI0xP7p+lmIb9/f3h0mSnBDRWAixE9tvnwPMtCzL
4zzPF23vrAWQZdnOYDD4QkRHPQKHsQDkwhhztg5EIwAb/Nal2Ht5LoS4JKLZ4+PjzJ0O+7e3t/eY
GZRMhBBv/YCgqCzLUVM2VgBIKfeI6NY/NTPfJUlyen19nXeh4PDwMFsul6dE9N7bj2yMjDEz/xvP
AOAkaZr+dMGZ+bcQ4sgYc9klcLhHSjkhom8+iKIo3viZqAGEabfBsxBxXyDIqBAiJ6JXrmOMMe/c
d2oAUkqk7MRuwslbgx8cHKAd0Zbg96qt2i2t9y4oM58ZY07xuwLQkPrPbWlH8CRJvnvZyLXWo7bs
BHQsHBUVAKUUOP5kT39njMnaPubvd/uKotiN9byUElS4wrzSWk8cgF+u8IhoFKt2pRRmw7mX0t/G
mOiQQncwMzoMa6G13qUgnXOtdTVe25Yt2ClO07dTlFJow2pOLJfLjxSk81hrfRED8JLnQbF/JZ+X
LukPg9uhMzbGgJbo8mnAgAOAezdyuxSSi2BbC3UAXqOF696DuG1tbWHY/VVRpRS7h1rrqDpa/s+J
CDO/Wn0A2K6rY/YGgH6G4BARqr4qppcCqKuyDwUhl7HZ0USBEGK+cRFuCmClCDdtw00BrLShP4hQ
lb5StfXUCwDUXVcNIgSRUi6cXHadBZsACN6pxveKGEG7OygbxjX8omtFuJ1JzA0rpaADTuj+iZHt
7QfPNLTKcaBqNVNtc8SXY+hHWZZDqGejIYFSNfk3bwri5MOwRpzJCP+PGhL3gq9UMRDRoW83NJjc
Z4q7YkoHg0FNhQVx/L9MqZ96d4BGW+6bSLsRTuYsZlTcR221w1/WzmqdyV17MUnTFHeAlQsG7n7M
nD89Pc2dBYPCEdFrIkJAmNXQ1MyLosg6XUx8bjG1cC9w3dGVd08l4a5xNasccNPqJL9pml4wM05W
efvYQrqJaFoUxVHMqEYB+MHs2B4zM1JeyzFUjZlxC56Bnpubm2kMpHv+B4f7Zsut/FA0AAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
